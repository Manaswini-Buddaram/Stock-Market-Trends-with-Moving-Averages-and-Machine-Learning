STOCK.IPYNB

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import confusion_matrix, classification_report

# Assuming df is your DataFrame with the provided dataset
# Assuming 'BinaryTarget' is your binary classification target column

# Print the columns to see their names
print("Column Names:", df.columns)

# Replace 'YourDateColumnName' with the actual column name containing date or timestamp information
date_column_name = 'YourDateColumnName'

# Convert the date column to datetime and set it as the index
df[date_column_name] = pd.to_datetime(df[date_column_name])
df.set_index(date_column_name, inplace=True)

# Define features (X) and target variable (y)
X = df[['Close*']]
y = df['BinaryTarget']  # Replace 'BinaryTarget' with your actual binary target column name

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize the features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Initialize the KNN classifier
knn = KNeighborsClassifier(n_neighbors=5)

# Train the model
knn.fit(X_train_scaled, y_train)

# Make predictions on the test set
y_pred = knn.predict(X_test_scaled)

# Generate confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)

# Print confusion matrix
print("Confusion Matrix:")
print(conf_matrix)

# Print other classification metrics if needed
classification_rep = classification_report(y_test, y_pred)
print("Classification Report:")
print(classification_rep)

import matplotlib.pyplot as plt

# Scatter plot for MA10
plt.scatter(y_test['MA10'], y_pred_ma10)
plt.xlabel('Actual MA10')
plt.ylabel('Predicted MA10')
plt.title('Actual vs Predicted MA10')
plt.show()


# Display actual and predicted values for MA10
result_ma10 = pd.DataFrame({'Actual_MA10': y_test['MA10'], 'Predicted_MA10': y_pred_ma10})
print(result_ma10.head())

# Display actual and predicted values for MA20
result_ma20 = pd.DataFrame({'Actual_MA20': y_test['MA20'], 'Predicted_MA20': y_pred_ma20})
print(result_ma20.head())



INDEX.HTML

<!DOCTYPE html>
<html lang="en">
    
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Stock Prediction App</title>
</head>
<body>
    <h1>Stock Prediction App</h1>
    <form method="post" action="/predict">
        <label for="date">Enter Date:</label>
        <input type="date" id="date" name="date" required>
        <br>
        <label for="close">Enter Close Value:</label>
        <input type="number" id="close" name="close" step="0.01" required>
        <br>
        <button type="submit">Predict</button>
    </form>
    <div>
        <h2>Predictions</h2>
        <p>Date: {{ date }}</p>
        <p>Close Value: {{ close }}</p>
        <p>Predicted MA10: {{ ma10 }}</p>
        <p>Predicted MA20: {{ ma20 }}</p>
    </div>
</body>
</html>


APP.PY

from flask import Flask, render_template, request
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsRegressor

app = Flask(__name__)


# Load your dataset
# Assuming df is your DataFrame (as processed in your provided code)
# Make sure to sort the DataFrame by Date to ensure accurate predictions
df = pd.read_csv('c://users//sufi//yahoo_data.csv')
df = df.sort_values(by='Date')

# Assuming df is your DataFrame with the provided dataset
# Convert 'Date' to datetime and set it as the index
df['Date'] = pd.to_datetime(df['Date'], format='%d-%b-%y')
df.set_index('Date', inplace=True)

# Define features (X) and target variables (y)
X = df[['Close*']]

# Try to get 'MA10', if not found set it to None
y_ma10 = df['MA10'] if 'MA10' in df.columns else None

# Try to get 'MA20', if not found set it to None
y_ma20 = df['MA20'] if 'MA20' in df.columns else None

# Check if 'y_ma10' and 'y_ma20' are not None before proceeding
if y_ma10 is not None and y_ma20 is not None:
    # Standardize the features
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)

    # Initialize the KNN regressor for MA10
    knn_ma10 = KNeighborsRegressor(n_neighbors=5)
    knn_ma10.fit(X_scaled, y_ma10)

    # Initialize the KNN regressor for MA20
    knn_ma20 = KNeighborsRegressor(n_neighbors=5)
    knn_ma20.fit(X_scaled, y_ma20)

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/predict', methods=['POST'])
def predict():
    if request.method == 'POST':
        try:
            date_str = request.form['date']
            close_value = float(request.form['close'])

            # Convert the input date to datetime
            input_date = pd.to_datetime(date_str, format='%Y-%m-%d')

            # Prepare input data for prediction
            input_data = pd.DataFrame({'Close*': [close_value]}, index=[input_date])
            
            # Check if 'y_ma10' and 'y_ma20' are not None before proceeding
            if y_ma10 is not None and y_ma20 is not None:
                input_data_scaled = scaler.transform(input_data)

                # Make predictions for MA10 and MA20
                predicted_ma10 = knn_ma10.predict(input_data_scaled)[0]
                predicted_ma20 = knn_ma20.predict(input_data_scaled)[0]

                return render_template('index.html', date=date_str, close=close_value, ma10=predicted_ma10, ma20=predicted_ma20)
            else:
                return render_template('index.html', error="Error: 'MA10' or 'MA20' column not found in DataFrame.")
        except Exception as e:
            print(f"Error: {e}")
            return render_template('index.html', error=f"Internal error: {e}")

if __name__ == '__main__':
    app.run(debug=True)







